---
author: rubydoobiedoo
comments: true
date: 2016-04-28 22:08:59+00:00
layout: post
link: https://rubydoobiedoo.wordpress.com/2016/04/28/part-1-building-a-devise-authenticated-google-maps-enabled-angularrails-app/
slug: part-1-building-a-devise-authenticated-google-maps-enabled-angularrails-app
title: 'Part 1: Building a Devise Authenticated google-maps enabled Angular/Rails
  App'
wordpress_id: 926
---

I estimated this project would take me about a week. Ultimately it took me twice as long with a hell of a headache, angular will punish you if you're unorganized, will punish you if you digress from your current code, and it will punish you for fun if it thinks that things have been going a bit too smoothly.. BUT hey thats programming in general for you.

The thing with angular though, and it may seem superficial, is that it looks really cool. I know it sounds dumb, but well written angular is fun to follow and has the added benefit of being javascript and allowing realtime updates of views, which i find fascinating.

The project I built out, which I'll walk with you step by step in hopes of making this easier for everyone, was a web application in the same vein as a to do list app.

You can check out the project by downloading the [repo](http://github.com/pajamaw/manila) at github and then running rake db:migrate to create the tables for the SQLITE db.


# First and most importantly what are the objectives of this project?





	
  1. Create an app that allows multiple users to create their own "bucket map" lists where they add a location/title/date/description of an event that they'd like to do in the future. E.g. I created a Summer list with things like go to the beach, with North shore tagged.

	
  2.  Allow users to delete, edit, and check off their events, as well as see others lists.

	
  3. There should be a map visible that changes its markers depending on the list selected.




# Great, now what tools are we using to build this?





	
  1. AngularJS for front end

	
  2. rails framework for backend

	
  3. [bower](http://bower.io/) for front end package management

	
  4. [active model serializers](https://github.com/rails-api/active_model_serializers) to create JSON objects from ruby objects and effectively create our api

	
  5. [sqlite](https://www.sqlite.org/) for db management

	
  6. [bootstrap](http://getbootstrap.com/) to make everything look good as well as for specific angular directives

	
  7. [devise and angular devise](https://github.com/cloudspace/angular_devise) for user creation and authentication

	
  8. [angular -ui router](https://github.com/angular-ui/ui-router) to create the single page app feel

	
  9. [angular - resource](https://docs.angularjs.org/api/ngResource/service/$resource) to handle our $http requests

	
  10. angular rails templates to hold our views for the single page app

	
  11. [angular google maps](https://github.com/angular-ui/angular-google-maps/issues/356)an to add interactive maps

	
  12. [google maps javascript api key](https://developers.google.com/maps/documentation/javascript/reference#Marker) which can be grabbed by going to google to use their maps

	
  13. [angular -xeditable](https://vitalets.github.io/angular-xeditable/#text-customize) for edit in place features


Awesome, if you haven't heard of some of these no worries, I'd check them out but I was aware of half of them before i undertook this project.


# Now what's the roadmap?





	
  1. All the rails. Setup the rails app and the Rails Backend API routes, models, controllers, and the JSON API generated by ams, and the one view page with its layout.

	
  2. Setup template in app/assets/javascripts folder for angular app.

	
  3. Setup the planned ui-route configuration for the app in the app.js file.

	
  4. Setup skeleton for html templates that the routes will use and appear in.

	
  5. Make Controllers where the methods to create/save/update/delete the lists and list items will be stored.

	
  6. Make Services where $resource will be employed to fetch the json objects from the api generated from rails.

	
  7. Add gmaps functionality to templates and controllers.

	
  8. Use Angular Devise to streamline the user creation.

	
  9. Create User page where to access individual users info.

	
  10. Refactor!


As the title suggests this is going to be a multi post series, following along with the roadmap i've laid out In hopes of having more concise posts that go in depth on each feature. I'll be updating this series with a new post for the next week but in the meantime if you have any questions/criticism/advice let me know!






